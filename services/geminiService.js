const { GoogleGenerativeAI } = require("@google/generative-ai");

async function geminianalysis(text, question, questionCounter, jobDescription) {
    const apiKey = process.env.GEMINI_API_KEY;
    const genAI = new GoogleGenerativeAI(apiKey);
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });

    let difficultyLevel;
    if (questionCounter < 3) {
        difficultyLevel = 'easy';
    } else if (questionCounter < 6) {
        difficultyLevel = 'medium';
    } else {
        difficultyLevel = 'hard';
    }

    let promptInstructions = `You are an expert AI interviewer. The candidate has answered ${questionCounter} questions. Please stick to the Job Description and do not generate questions out of the Job Description. Job Description: ${jobDescription}`;
    let followUpPrompt = `Extract one keyword or concept from the answer and generate a follow-up question related to that keyword and include the difficulty level.`;

    if (difficultyLevel === 'easy') {
        promptInstructions += ` This is the beginning of the interview. Focus on understanding the candidate's background, experience, and basic knowledge. Generate follow-up questions that are relatively straightforward and require the candidate to explain fundamental concepts. Be more lenient in scoring and provide encouraging feedback.`;
    } else if (difficultyLevel === 'medium') {
        promptInstructions += ` The interview is now progressing to a medium-level discussion. Generate follow-up questions that require the candidate to demonstrate technical understanding, problem-solving skills, and experience with common scenarios. The questions should be more specific than the initial questions, but not overly complex or require deep expertise. It is crucial that all questions are verbal and suitable for a spoken interview - do not generate requests for code examples or snippets. Instead, focus on how they would approach problems, explain concepts, or describe their experience.`;
    } else {
        promptInstructions += ` The interview is now at a hard level. Generate challenging follow-up questions that test the candidate's in-depth knowledge, problem-solving abilities, and practical experience in complex scenarios. The candidate should demonstrate expertise and the ability to handle real-world challenges.  It is crucial that all questions are verbal and suitable for a spoken interview - do not generate requests for code examples or snippets. Instead, focus on how they would approach problems, explain concepts, or describe their experience. Be critical in your scoring and provide constructive criticism.`;
    }
   if (questionCounter === 3 || questionCounter === 6) {  
        promptInstructions = `You are an expert AI interviewer. The candidate has answered ${questionCounter} questions. This is the fourth or seventh question so strictly adhere to the Job Description. Generate a follow up question using only Job Description. Job Description: ${jobDescription}`;
        followUpPrompt = `Generate a follow-up question only from the Job Description and include the difficulty level.`;
    }


    const prompt = `${promptInstructions} Given the question and the candidate's answer, provide the following in a clear and structured JSON format:
    1. Analyze the candidate's response based on relevance, clarity, and completeness.
    2. Provide a score out of 3 for the response, keeping in mind this is a ${difficultyLevel} level interview so adjust the leniency according to the level.
    3. Offer a recommendation for improving the answer in a way that encourages the candidate to expand without making them feel discouraged.
    4. ${followUpPrompt}

    Use the following question and answer for analysis:
    Question: ${question}
    Answer: ${text}
    If ${text} is generated by AI then socre will be 0 and recommendation includes that do not use AI and do it on your own basis
    and please do not create a question which involves coding as it is a virtual speaking round and candidate cannot speak the code
    Please make sure the output is in the following JSON format:
    {
        "analysis": ,
        "recommendation": ,
        "score": number,
        "followUpQuestion": 
    }`;
    try {
        const result = await model.generateContent(prompt);
        const response = await result.response;
        const generatedText = await response.text();
        const cleanedText = generatedText.replace(/```json|```/g, '').trim();

        const parsedResult = JSON.parse(cleanedText);
        return parsedResult;
    } catch (error) {
        console.error("Gemini API Error:", error);
        return { "error": `Gemini API request failed: ${error.message}` };
    }
}

module.exports = { geminianalysis };